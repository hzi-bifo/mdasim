"""
This pipeline tests the output of MDAsim for for presence and correctness of
single nucleotide errors. For further information, please refer to the README.
"""

#variables
reference_seq="input/inSequence.fa"
amplicons="input/outAmplicons.fasta"
logfile="input/SNPs.log"
outfolder="output"

#all-rule
rule all:
    """
    Runs the complete pipeline.
    """
    input:
        "output/comparison.txt"

rule minimapNview:
    """
    Prints alignment in the piped alignment sam-file generated by minimap2
    to standard output in BAM format
    """
    output:
        temp("{outfolder}/aln.bam")
    params:
        "-bS"
    shell:
        "minimap2 -ax asm5 "
        + reference_seq + " "
        + amplicons + " "
        + "| samtools view -o {output} {params}"

rule sort:
    """
    Sort alignments by leftmost coordinates
    """
    input:
        "{outfolder}/aln.bam"
    output:
        "{outfolder}/aln_sorted.bam"
    shell:
        "samtools sort -o {output} {input}"

rule pileup:
    """
    Generate pileup for the BAM file.

    In the pileup format, each line represents a genomic position, consisting of
    chromosome name, 1-based coordinate, reference base, the number of reads
    covering the site, read bases, base qualities and alignment mapping qualities.
    """
    input:
        "{outfolder}/aln_sorted.bam"
    output:
        "{outfolder}/aln.out"
    params:
        " "
    shell:
        "samtools mpileup -o {output} {params} {input}"

rule summary:
    """
    Scans the file generated by the rule pileup and summarizes all SNPs generated
    by MDAsim 2.0
    """
    input:
        "{outfolder}/aln.out"
    output:
        "{outfolder}/summary.txt"
    shell:
        "python3 summary.py --input={input} --output={output}"

rule map2log:
    """
    Compares the SNPs listed in the summary to the single nucleotide substitutions
    that were originally created by MDAsim 2.0 and logged in the log file
    """
    input:
        "{outfolder}/summary.txt"
    output:
        "{outfolder}/comparison.txt"
    shell:
        "python3 mapToLog.py "
        "--summary={input} "
        "--log=" + logfile + " "
        "--output={output}"
