"""
This pipeline tests the output of MDAsim for for presence and correctness of
single nucleotide errors. For further information, please refer to the README.
"""

# EDIT: specify input and output file paths

## reference sequence used by MDAsim run (`--input` option)
ref = "../example_input.fa"

## amplicons generated by MDAsim run (`--output` option)
amp = "../example_mdasim_out_prefix_Amplicons.fasta"

## single nucleotide error log generated by MDAsim run (`--log` option)
log = "../example_mdasim_errors.log"

## requested output directory
out_folder = "output"


# DO NOT EDIT: the following should just work as is

## split specified paths
import os.path as path

ref_path = path.dirname( ref )
(ref_prefix, ref_ext) = path.splitext( path.basename( ref ) )

amp_path = path.dirname( amp )
(amp_prefix, amp_ext) = path.splitext( path.basename( amp ) )

log_path = path.dirname( log )
(log_prefix, log_ext) = path.splitext( path.basename( log ) )


rule all:
    """
    Runs the complete pipeline.
    """
    input:
        out_folder + "/" + ref_prefix + "." + amp_prefix + "." + log_prefix + ".cnt_comparison.tsv",
        out_folder + "/" + ref_prefix + "." + amp_prefix + ".aln_mismatches.tsv"

rule minimapNview:
    """
    Prints alignment in the piped alignment sam-file generated by minimap2
    to standard output in BAM format
    """
    input:
        r = ref_path + "/{reference}" + ref_ext,
        a = amp_path + "/{amplicons}" + amp_ext
    output:
        temp("{outfolder}/{reference}.{amplicons}.bam")
    shell:
        "minimap2 -ax asm5 {input.r} {input.a} |"
        "samtools view -b -o {output}"

rule sort:
    """
    Sort alignments by leftmost coordinates
    """
    input:
        "{outfolder}/{reference}.{amplicons}.bam"
    output:
        temp("{outfolder}/{reference}.{amplicons}.sorted.bam")
    shell:
        "samtools sort -o {output} {input}"

rule pileup:
    """
    Generate pileup for the BAM file.

    In the pileup format, each line represents a genomic position, consisting of
    chromosome name, 1-based coordinate, reference base, the number of reads
    covering the site, read bases, base qualities and alignment mapping qualities.
    """
    input:
        "{outfolder}/{reference}.{amplicons}.sorted.bam"
    output:
        temp("{outfolder}/{reference}.{amplicons}.mpileup")
    params:
        " "
    shell:
        "samtools mpileup -o {output} {params} {input}"

rule summary:
    """
    Scans the file generated by the rule pileup and summarizes all SNPs generated
    by MDAsim
    """
    input:
        "{outfolder}/{reference}.{amplicons}.mpileup"
    output:
        "{outfolder}/{reference}.{amplicons}.aln_mismatches.tsv"
    shell:
        "python3 scripts/summary.py --input={input} --output={output}"

rule map2log:
    """
    Compares the SNPs listed in the summary to the single nucleotide substitutions
    that were originally created by MDAsim and logged in the log file
    """
    input:
        summary = "{outfolder}/{reference}.{amplicons}.aln_mismatches.tsv",
        log = log_path + "/{log}" + log_ext
    output:
        "{outfolder}/{reference}.{amplicons}.{log}.cnt_comparison.tsv"
    shell:
        "python3 scripts/mapToLog.py "
        "--summary={input.summary} "
        "--log={input.log} "
        "--output={output}"
