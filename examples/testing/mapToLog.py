"""
Counts the SNPs from the log and the summary and compares them
"""

import argparse
import os
import sys

# parse cmd-line arguments
parser = argparse.ArgumentParser()

#get cmd-line arguments
parser.add_argument('--summary', action='store', help='Summary-file generated by summary.py');
parser.add_argument('--log', action='store', help='Log file generated by mdasim');
parser.add_argument('--output', action='store', help='Mapping between alignment and log');
args = parser.parse_args();

# handle files
file_in_sum = args.summary;
file_in_log = args.log;
file_out = args.output;

summary = open(file_in_sum, 'rt');

sum_a_t = 0;    #counters
sum_t_a = 0;
sum_a_c = 0;
sum_c_a = 0;
sum_a_g = 0;
sum_g_a = 0;
sum_t_c = 0;
sum_c_t = 0;
sum_t_g = 0;
sum_g_t = 0;
sum_c_g = 0;
sum_g_c = 0;

allSNPs_sum = [];
# #pos	ref	alt	r_cnt	a_cnt
# 35678	C	T	890	167
for line in summary:
    #print(line);
    contents = line.split();
    if(contents[0] != '#pos'):
        ref = contents[1];
        alt = contents[2];
        allSNPs_sum.append({'position':int(contents[0]), 'ref':ref, 'alt':alt});
        if (ref == 'A' and alt == 'T'):
            sum_a_t +=1;
        if (ref == 'T' and alt == 'A'):
            sum_t_a +=1;
        if (ref == 'A' and alt == 'C'):
            sum_a_c +=1;
        if (ref == 'C' and alt == 'A'):
            sum_c_a +=1;
        if (ref == 'A' and alt == 'G'):
            sum_a_g +=1;
        if (ref == 'G' and alt == 'A'):
            sum_g_a +=1;
        if (ref == 'T' and alt == 'C'):
            sum_t_c +=1;
        if (ref == 'C' and alt == 'T'):
            sum_c_t +=1;
        if (ref == 'T' and alt == 'G'):
            sum_t_g +=1;
        if (ref == 'G' and alt == 'T'):
            sum_g_t +=1;
        if (ref == 'C' and alt == 'G'):
            sum_c_g +=1;
        if (ref == 'G' and alt == 'C'):
            sum_g_c +=1;

allSNPs_sum.sort(key=lambda x: (x['position'], x['alt']), reverse=False);

log = open(file_in_log, 'rt');

log_a_t = 0;    #counters
log_t_a = 0;
log_a_c = 0;
log_c_a = 0;
log_a_g = 0;
log_g_a = 0;
log_t_c = 0;
log_c_t = 0;
log_t_g = 0;
log_g_t = 0;
log_c_g = 0;
log_g_c = 0;

# #pos 	ref	sub
# 12	A	C
allSNPs_log = [];
for line in log:
    #print(line);
    contents = line.split();
    if(contents[0] != '#pos'):
        ref = contents[1];
        alt = contents[2];
        allSNPs_log.append({'position':int(contents[0]), 'ref':ref, 'alt':alt});
        if (ref == 'A' and alt == 'T'):
            log_a_t +=1;
        if (ref == 'T' and alt == 'A'):
            log_t_a +=1;
        if (ref == 'A' and alt == 'C'):
            log_a_c +=1;
        if (ref == 'C' and alt == 'A'):
            log_c_a +=1;
        if (ref == 'A' and alt == 'G'):
            log_a_g +=1;
        if (ref == 'G' and alt == 'A'):
            log_g_a +=1;
        if (ref == 'T' and alt == 'C'):
            log_t_c +=1;
        if (ref == 'C' and alt == 'T'):
            log_c_t +=1;
        if (ref == 'T' and alt == 'G'):
            log_t_g +=1;
        if (ref == 'G' and alt == 'T'):
            log_g_t +=1;
        if (ref == 'C' and alt == 'G'):
            log_c_g +=1;
        if (ref == 'G' and alt == 'C'):
            log_g_c +=1;

log.close();

allSNPs_log.sort(key=lambda x: (x['position'], x['alt']), reverse=False);
log = open(file_in_log, 'wt');
log.write("#pos\tref\talt\n");
for snp in allSNPs_log:
    log.write("" + str(snp['position']) + "\t" + snp['ref'] + "\t" + snp['alt'] + "\n");

log.close();

outfile = open(file_out, 'wt');
outfile.write("#substitution\tlog_cnt\t\taln_cnt\n");
outfile.write("A to T \t\t" + str(log_a_t) + "\t\t" + str(sum_a_t) + "\n");
outfile.write("A to C \t\t" + str(log_a_c) + "\t\t" + str(sum_a_c) + "\n");
outfile.write("A to G \t\t" + str(log_a_g) + "\t\t" + str(sum_a_g) + "\n");
outfile.write("T to A \t\t" + str(log_t_a) + "\t\t" + str(sum_t_a) + "\n");
outfile.write("T to C \t\t" + str(log_t_c) + "\t\t" + str(sum_t_c) + "\n");
outfile.write("T to G \t\t" + str(log_t_g) + "\t\t" + str(sum_t_g) + "\n");
outfile.write("C to A \t\t" + str(log_c_a) + "\t\t" + str(sum_c_a) + "\n");
outfile.write("C to T \t\t" + str(log_c_t) + "\t\t" + str(sum_c_t) + "\n");
outfile.write("C to G \t\t" + str(log_c_g) + "\t\t" + str(sum_c_g) + "\n");
outfile.write("G to A \t\t" + str(log_g_a) + "\t\t" + str(sum_g_a) + "\n");
outfile.write("G to T \t\t" + str(log_g_t) + "\t\t" + str(sum_g_t) + "\n");
outfile.write("G to C \t\t" + str(log_g_c) + "\t\t" + str(sum_g_c) + "\n");
outfile.write("\n\n");

log.close();
summary.close();

l = 0;
s = 0;
outfile.write("#ref_pos \tlog_ref \tlog_alt \taln_pos \taln_ref \taln_alt \tref=aln?\n")
while(l < len(allSNPs_log) and s < len(allSNPs_sum)):
    if(allSNPs_log[l]['position'] == allSNPs_sum[s]['position']):

        outfile.write(str(allSNPs_log[l]['position']) + "\t" + allSNPs_log[l]['ref'] + "\t" + allSNPs_log[l]['alt'] + "\t"
        + str(allSNPs_sum[s]['position']) + "\t" + allSNPs_sum[s]['ref'] + "\t" + allSNPs_sum[s]['alt'])

        if(allSNPs_log[l]['ref'] == allSNPs_sum[s]['ref'] and allSNPs_log[l]['alt'] == allSNPs_sum[s]['alt']):
            outfile.write("\t true \n");
        elif(allSNPs_log[l]['ref'] == allSNPs_sum[s]['alt'] and allSNPs_log[l]['alt'] == allSNPs_sum[s]['ref']):
            outfile.write("\t swapped \n");
        else:
            outfile.write("\t - \n");

        s += 1;
        l += 1;
    elif(allSNPs_log[l]['position'] < allSNPs_sum[s]['position']):
        outfile.write(str(allSNPs_log[l]['position']) + "\t" + allSNPs_log[l]['ref'] + "\t" + allSNPs_log[l]['alt'] + "\t- \t- \t- \n")
        l+=1;
    else:
        outfile.write("- \t- \t-" + "\t" + str(allSNPs_sum[s]['position']) + "\t" + allSNPs_sum[s]['ref'] + "\t" + allSNPs_sum[s]['alt'] + "\n")
        s+=1;

while(l < len(allSNPs_log)):
    outfile.write(str(allSNPs_log[l]['position']) + "\t" + allSNPs_log[l]['ref'] + "\t" + allSNPs_log[l]['alt'] + "\t- \t- \t- \n")
    l+=1;
while(s < len(allSNPs_sum)):
    outfile.write("- \t- \t-" + "\t" + str(allSNPs_sum[s]['position']) + "\t" + allSNPs_sum[s]['ref'] + "\t" + allSNPs_sum[s]['alt'] + "\n")
    s+=1;

outfile.close;
